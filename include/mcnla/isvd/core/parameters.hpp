////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file    include/mcnla/isvd/core/parameters.hpp
/// @brief   The the parameter structure of iSVD driver.
///
/// @author  Mu Yang <<emfomy@gmail.com>>
///

#ifndef MCNLA_ISVD_CORE_PARAMETERS_HPP_
#define MCNLA_ISVD_CORE_PARAMETERS_HPP_

#include <mcnla/isvd/core/parameters.hh>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The MCNLA namespace.
//
namespace mcnla {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The iSVD namespace.
//
namespace isvd {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Default constructor
///
Parameters::Parameters(
    const MPI_Comm mpi_comm,
    const mpi_int_t mpi_root
) noexcept
  : mpi_comm(mpi_comm),
    mpi_size(mpi::commSize(mpi_comm)),
    mpi_root(mpi_root),
    mpi_rank(mpi::commRank(mpi_comm)) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Default constructor
///
void Parameters::sync() noexcept {
  const MPI_Comm comm_tmp = mpi_comm;
  const index_t  rank_tmp = mpi_rank;

  MPI_Bcast(this, sizeof(*this), MPI_BYTE, mpi_root, mpi_comm);

  const_cast<MPI_Comm&>(mpi_comm) = comm_tmp;
  const_cast<index_t&>(mpi_rank)  = rank_tmp;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the number of rows of the matrix.
///
index_t Parameters::nrow() const noexcept {
  return nrow_;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the number of rows of the matrix per MPI node.
///
index_t Parameters::nrowEach() const noexcept {
  return (nrow_-1) / mpi_size + 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the number of total allocated rows of the matrix.
///
index_t Parameters::nrowTotal() const noexcept {
  return nrowEach() * mpi_size;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the number of column of the matrix.
///
index_t Parameters::ncol() const noexcept {
  return ncol_;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the desired rank of approximate SVD.
///
index_t Parameters::rank() const noexcept {
  return rank_;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the oversampling dimension.
///
index_t Parameters::overRank() const noexcept {
  return over_rank_;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the dimension of random sketches.
///
index_t Parameters::dimSketch() const noexcept {
  return rank_ + over_rank_;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the number of random sketches of all MPI nodes.
///
index_t Parameters::numSketch() const noexcept {
  return num_sketch_each_ * mpi_size;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the number of random sketches per MPI node.
///
index_t Parameters::numSketchEach() const noexcept {
  return num_sketch_each_;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the number of rows of the matrix.
///
index_t& Parameters::nrow() noexcept {
  return nrow_;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the number of column of the matrix.
///
index_t& Parameters::ncol() noexcept {
  return ncol_;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the desired rank of approximate SVD.
///
index_t& Parameters::rank() noexcept {
  return rank_;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the oversampling dimension.
///
index_t& Parameters::overRank() noexcept {
  return over_rank_;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the number of random sketches per MPI node.
///
index_t& Parameters::numSketchEach() noexcept {
  return num_sketch_each_;
}

}  // namespace isvd

}  // namespace mcnla

#endif  // MCNLA_ISVD_CORE_PARAMETERS_HPP_

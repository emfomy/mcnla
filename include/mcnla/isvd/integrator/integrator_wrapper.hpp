////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file    include/mcnla/isvd/integrator/integrator_wrapper.hpp
/// @brief   The iSVD integrator wrapper.
///
/// @author  Mu Yang <<emfomy@gmail.com>>
///

#ifndef MCNLA_ISVD_INTEGRATOR_INTEGRATOR_WRAPPER_HPP_
#define MCNLA_ISVD_INTEGRATOR_INTEGRATOR_WRAPPER_HPP_

#include <mcnla/isvd/integrator/integrator_wrapper.hh>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The MCNLA namespace.
//
namespace mcnla {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The iSVD namespace.
//
namespace isvd {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Construct with given parameters.
///
template <class _Derived>
IntegratorWrapper<_Derived>::IntegratorWrapper(
    const ParametersType &parameters,
    const MPI_Comm mpi_comm,
    const mpi_int_t mpi_root
) noexcept
  : parameters_(parameters),
    mpi_comm_(mpi_comm),
    mpi_root_(mpi_root) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Initializes.
///
template <class _Derived>
void IntegratorWrapper<_Derived>::initialize() noexcept {
  iteration_ = -1;
  this->derived().initializeImpl();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Integrates.
///
template <class _Derived>
void IntegratorWrapper<_Derived>::integrate() noexcept {
  this->derived().integrateImpl();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Output name to stream.
///
template <class __Derived>
std::ostream& operator<< (
    std::ostream &os,
    const IntegratorWrapper<__Derived> &wrapper
) {
  return wrapper.outputName(os);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  operator<<
///
template <class _Derived>
std::ostream& IntegratorWrapper<_Derived>::outputName(
    std::ostream &os
) const noexcept {
  return this->derived().outputNameImpl(os);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  mcnla::isvd::Driver::integratorTime
///
template <class _Derived>
double IntegratorWrapper<_Derived>::time() const noexcept {
  return this->derived().timeImpl();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  mcnla::isvd::Driver::integratorIteration
///
template <class _Derived>
index_t IntegratorWrapper<_Derived>::iteration() const noexcept {
  return iteration_;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the collection Q.
///
template <class _Derived>
DenseMatrixCollection120<ValT<_Derived>>& IntegratorWrapper<_Derived>::collectionQ() noexcept {
  return this->derived().collectionQImpl();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  collectionQ
///
template <class _Derived>
const DenseMatrixCollection120<ValT<_Derived>>& IntegratorWrapper<_Derived>::collectionQ() const noexcept {
  return this->derived().collectionQImpl();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the matrix Q.
///
template <class _Derived>
DenseMatrixRowMajor<ValT<_Derived>>& IntegratorWrapper<_Derived>::matrixQ() noexcept {
  return this->derived().matrixQImpl();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  matrixQ
///
template <class _Derived>
const DenseMatrixRowMajor<ValT<_Derived>>& IntegratorWrapper<_Derived>::matrixQ() const noexcept {
  return this->derived().matrixQImpl();
}

}  // namespace isvd

}  // namespace mcnla

#endif  // MCNLA_ISVD_INTEGRATOR_INTEGRATOR_WRAPPER_HPP_

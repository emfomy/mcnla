////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file    include/mcnla/isvd/former/dummy_former.ipp
/// @brief   The implementation of dummy former.
///
/// @author  Mu Yang <<emfomy@gmail.com>>
///

#ifndef MCNLA_ISVD_FORMER_DUMMY_FORMER_IPP_
#define MCNLA_ISVD_FORMER_DUMMY_FORMER_IPP_

#include <mcnla/isvd/former/dummy_former.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The MCNLA namespace.
//
namespace mcnla {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The iSVD namespace.
//
namespace isvd {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  mcnla::isvd::FormerBase::FormerBase
///
template <class _Matrix>
DummyFormer<_Matrix>::DummyFormer(
    const Parameters<ScalarType> &parameters
) noexcept : BaseType(parameters) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  mcnla::isvd::FormerBase::initialize
///
template <class _Matrix>
void DummyFormer<_Matrix>::initializeImpl() noexcept {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  mcnla::isvd::FormerBase::form
///
template <class _Matrix>
void DummyFormer<_Matrix>::formImpl(
    const _Matrix &matrix_a,
    const DenseMatrix<ScalarType, Layout::ROWMAJOR> &matrix_qc
) noexcept { static_cast<void>(matrix_a); static_cast<void>(matrix_qc); }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  mcnla::isvd::FormerBase::nvecame
///
template <class _Matrix>
constexpr const char* DummyFormer<_Matrix>::nvecameImpl() const noexcept {
  return name_;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  mcnla::isvd::FormerBase::getTime
///
template <class _Matrix>
double DummyFormer<_Matrix>::getTimeImpl() const noexcept {
  return 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  mcnla::isvd::FormerBase::getTimes
///
template <class _Matrix>
const std::vector<double> DummyFormer<_Matrix>::getTimesImpl() const noexcept {
  return {};
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @fn  DummyFormer::getVectorSImpl
/// @copydoc  mcnla::isvd::FormerBase::getVectorS
///
/// @attention  This routine is not available.
///

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @fn  DummyFormer::getMatrixUImpl
/// @copydoc  mcnla::isvd::FormerBase::getMatrixU
///
/// @attention  This routine is not available.
///

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @fn  DummyFormer::getMatrixVtImpl
/// @copydoc  mcnla::isvd::FormerBase::getMatrixVt
///
/// @attention  This routine is not available.
///

}  // namespace isvd

}  // namespace mcnla

#endif  // MCNLA_ISVD_FORMER_DUMMY_FORMER_IPP_

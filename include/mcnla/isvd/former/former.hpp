////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file    include/mcnla/isvd/former/former.hpp
/// @brief   The iSVD former interface.
///
/// @author  Mu Yang <<emfomy@gmail.com>>
///

#ifndef MCNLA_ISVD_FORMER_FORMER_HPP_
#define MCNLA_ISVD_FORMER_FORMER_HPP_

#include <mcnla/isvd/def.hpp>
#include <mcnla/isvd/former/former_wrapper.hpp>
#include <mcnla/core/utility/traits.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The MCNLA namespace.
//
namespace mcnla {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The iSVD namespace.
//
namespace isvd {

#ifndef DOXYGEN_SHOULD_SKIP_THIS
template <class _Tag, typename _Val> class Former;
#endif  // DOXYGEN_SHOULD_SKIP_THIS

}  // namespace isvd

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The traits namespace.
//
namespace traits {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// The former traits.
///
template <class _Tag, typename _Val>
struct Traits<isvd::Former<_Tag, _Val>> {
  using ValType = _Val;
};

}  // namespace traits

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The iSVD namespace.
//
namespace isvd {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ingroup  isvd_former_module_detail
/// The interface of iSVD former.
///
/// @tparam  _Tag  The former tag.
/// @tparam  _Val  The value type.
///
template <class _Tag, typename _Val>
class Former : public FormerWrapper<Former<_Val, _Tag>> {
  static_assert(traits::False<_Tag>::value, "Error using non-specialized iSVD former!");
};

}  // namespace isvd

}  // namespace mcnla

#endif  // MCNLA_ISVD_FORMER_FORMER_HPP_

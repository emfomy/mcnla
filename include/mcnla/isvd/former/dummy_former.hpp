////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file    include/mcnla/isvd/former/dummy_former.hpp
/// @brief   The SVD former.
///
/// @author  Mu Yang <<emfomy@gmail.com>>
///

#ifndef MCNLA_ISVD_FORMER_DUMMY_FORMER_HPP_
#define MCNLA_ISVD_FORMER_DUMMY_FORMER_HPP_

#include <mcnla/isvd/former/dummy_former.hh>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The MCNLA namespace.
//
namespace mcnla {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The iSVD namespace.
//
namespace isvd {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  mcnla::isvd::FormerWrapper::FormerWrapper
///
template <typename _Val>
Former<DummyFormerTag, _Val>::Former(
    const ParametersType &parameters,
    const MPI_Comm mpi_comm,
    const mpi_int_t mpi_root
) noexcept
  : BaseType(parameters, mpi_comm, mpi_root) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  mcnla::isvd::FormerWrapper::initialize
///
template <typename _Val>
void Former<DummyFormerTag, _Val>::initializeImpl() noexcept {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  mcnla::isvd::FormerWrapper::form
///
template <typename _Val> template <class _Matrix>
void Former<DummyFormerTag, _Val>::formImpl(
    const _Matrix &matrix_a,
    const DenseMatrixRowMajor<ValType> &matrix_q
) noexcept {
  static_cast<void>(matrix_a);
  static_cast<void>(matrix_q);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  mcnla::isvd::FormerWrapper::outputName
///
///
template <typename _Val>
std::ostream&Former<DummyFormerTag, _Val>::outputNameImpl(
    std::ostream &os
) const noexcept {
  return (os << name_);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  mcnla::isvd::FormerWrapper::time
///
template <typename _Val>
double Former<DummyFormerTag, _Val>::timeImpl() const noexcept {
  return 0;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @fn  Former<DummyFormerTag, _Val>::vectorSImpl
/// @copydoc  mcnla::isvd::FormerWrapper::vectorS
///
/// @attention  This routine is unavailable.
///

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @fn  Former<DummyFormerTag, _Val>::matrixUImpl
/// @copydoc  mcnla::isvd::FormerWrapper::matrixU
///
/// @attention  This routine is unavailable.
///

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @fn  Former<DummyFormerTag, _Val>::matrixVtImpl
/// @copydoc  mcnla::isvd::FormerWrapper::matrixVt
///
/// @attention  This routine is unavailable.
///

}  // namespace isvd

}  // namespace mcnla

#endif  // MCNLA_ISVD_FORMER_DUMMY_FORMER_HPP_

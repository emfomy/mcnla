////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file    include/mcnla/core_gpu/matrix/kit/gpu_array.hpp
/// @brief   The GPU array.
///
/// @author  Mu Yang <<emfomy@gmail.com>>
///

#ifndef MCNLA_CORE_GPU_MATRIX_KIT_GPU_ARRAY_HPP_
#define MCNLA_CORE_GPU_MATRIX_KIT_GPU_ARRAY_HPP_

#include <mcnla/core_gpu/matrix/kit/gpu_array.hh>
#include <mcnla/core_gpu/utility/memory.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The MCNLA namespace.
//
namespace mcnla {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The matrix namespace.
//
namespace matrix {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Default constructor.
///
template <typename _Val>
GpuArray<_Val>::GpuArray() noexcept
  : BaseType() {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Construct with given size information.
///
template <typename _Val>
GpuArray<_Val>::GpuArray(
    const index_t size,
    const index_t offset
) noexcept
  : BaseType(std::shared_ptr<_Val>(utility::gpuMalloc<_Val>(size), utility::gpuFree<_Val>), size, offset) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Construct with given raw data.
///
template <typename _Val>
GpuArray<_Val>::GpuArray(
    const BaseType &ptr,
    const index_t size,
    const index_t offset
) noexcept
  : BaseType(ptr, size, offset) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Copy constructor.
///
/// @attention  It is shallow copy (creates an alias).
///
template <typename _Val>
GpuArray<_Val>::GpuArray(
    const GpuArray &other
) noexcept
  : BaseType(other) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Copy assignment operator.
///
/// @attention  It is shallow copy (creates an alias).
///
template <typename _Val>
GpuArray<_Val>& GpuArray<_Val>::operator=(
    const GpuArray &other
) noexcept {
  BaseType::operator=(other);
  return *this;
}

}  // namespace matrix

}  // namespace mcnla

#endif  // MCNLA_CORE_GPU_MATRIX_KIT_GPU_ARRAY_HPP_

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file    include/mcnla/blas/blas.hpp
/// @brief   The BLAS definitions.
///
/// @author  Mu Yang <<emfomy@gmail.com>>
///

#ifndef MCNLA_BLAS_BLAS_HPP_
#define MCNLA_BLAS_BLAS_HPP_

#include <mcnla/mcnla.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The MCNLA namespace
//
namespace mcnla {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// The BLAS namespace
///
namespace blas {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// The BLAS detail namespace.
///
namespace detail {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Convert transpose option to char.
///
template <TransOption _trans, typename _Scalar>
struct TransChar {
  static constexpr char value = !isTranspose(_trans)
      ? ((!!isConjugate(_trans) && mcnla::detail::ScalarTraits<_Scalar>::is_complex) ? '?' : 'N')
      : ((!!isConjugate(_trans) && mcnla::detail::ScalarTraits<_Scalar>::is_complex) ? 'C' : 'T');
  static_assert(value != '?', "Conjugate no-transpose is nor supported!");
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Convert upper/lower option to char.
///
template <UploOption _uplo, Layout _layout>
struct UploChar {
  static constexpr char value = (isLower(_uplo) ^ isRowMajor(_layout)) ? 'L' : 'U';
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Convert diagonal option to char.
///
template <UploOption _uplo>
struct DiagChar {
  static constexpr char value = !isUnitDiag(_uplo) ? 'N' : 'U';
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Convert side option to char.
///
template <SideOption _side, Layout _layout>
struct SideChar {
  static constexpr char value = (isLeftSide(_side) ^ isRowMajor(_layout)) ? 'L' : 'R';
};

}  // namespace blas

}  // namespace mcnla

#endif  // MCNLA_BLAS_BLAS_HPP_

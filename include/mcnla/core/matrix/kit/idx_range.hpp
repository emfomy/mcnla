////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file    include/mcnla/core/matrix/kit/idx_range.hpp
/// @brief   The index range.
///
/// @author  Mu Yang <<emfomy@gmail.com>>
///

#ifndef MCNLA_CORE_MATRIX_KIT_INDEX_RANGE_HPP_
#define MCNLA_CORE_MATRIX_KIT_INDEX_RANGE_HPP_

#include <mcnla/core/matrix/kit/idx_range.hh>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The MCNLA namespace.
//
namespace mcnla {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The matrix namespace.
//
namespace matrix {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Equal-to operator.
///
bool IdxRange::operator==(
    const IdxRange& other
) const noexcept {
  return (begin == other.begin && end == other.end);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Not-equal-to operator.
///
bool IdxRange::operator!=(
    const IdxRange& other
) const noexcept {
  return !(*this == other);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Addition operator.
///
IdxRange IdxRange::operator+(
    const index_t idx
) const noexcept {
  return {this->begin + idx, this->end + idx};
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Subtraction operator.
///
IdxRange IdxRange::operator-(
    const index_t idx
) const noexcept {
  return {this->begin - idx, this->end - idx};
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Multiplication operator.
///
IdxRange IdxRange::operator*(
    const index_t idx
) const noexcept {
  return {this->begin * idx, this->end * idx};
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Division operator.
///
IdxRange IdxRange::operator/(
    const index_t idx
) const noexcept {
  return {this->begin / idx, this->end / idx};
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Addition assignment operator.
///
IdxRange& IdxRange::operator+=(
    const index_t idx
) noexcept {
  this->begin += idx;
  this->end   += idx;
  return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Subtraction assignment operator.
///
IdxRange& IdxRange::operator-=(
    const index_t idx
) noexcept {
  this->begin -= idx;
  this->end   -= idx;
  return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Multiplication assignment operator.
///
IdxRange& IdxRange::operator*=(
    const index_t idx
) noexcept {
  this->begin *= idx;
  this->end   *= idx;
  return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Division assignment operator.
///
IdxRange& IdxRange::operator/=(
    const index_t idx
) noexcept {
  this->begin /= idx;
  this->end   /= idx;
  return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the length of the range.
///
index_t IdxRange::len() const noexcept {
  return (end-begin);
}

}  // namespace matrix

}  // namespace mcnla

#endif  // MCNLA_CORE_MATRIX_KIT_INDEX_RANGE_HPP_

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file    include/mcnla/core/matrix/kit/idx_range.hpp
/// @brief   The index range.
///
/// @author  Mu Yang <<emfomy@gmail.com>>
///

#ifndef MCNLA_CORE_MATRIX_KIT_INDEX_RANGE_HPP_
#define MCNLA_CORE_MATRIX_KIT_INDEX_RANGE_HPP_

#include <mcnla/core/matrix/kit/idx_range.hh>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The MCNLA namespace.
//
namespace mcnla {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The matrix namespace.
//
namespace matrix {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Construct with given index
///
IdxRange::IdxRange(
    const index_t begin,
    const index_t end
) noexcept
  : begin(begin),
    end(end) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Equal-to operator.
///
bool IdxRange::operator==(
    const IdxRange& other
) const noexcept {
  return (begin == other.begin && end == other.end);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Not-equal-to operator.
///
bool IdxRange::operator!=(
    const IdxRange& other
) const noexcept {
  return !(*this == other);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Addition operator.
///
IdxRange IdxRange::operator+(
    const index_t scalar
) const noexcept {
  return {this->begin + scalar, this->end + scalar};
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Subtraction operator.
///
IdxRange IdxRange::operator-(
    const index_t scalar
) const noexcept {
  return {this->begin - scalar, this->end - scalar};
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Multiplication operator.
///
IdxRange IdxRange::operator*(
    const index_t scalar
) const noexcept {
  return {this->begin * scalar, this->end * scalar};
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Division operator.
///
IdxRange IdxRange::operator/(
    const index_t scalar
) const noexcept {
  return {this->begin / scalar, this->end / scalar};
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the length of the range.
///
index_t IdxRange::length() const noexcept {
  return (end-begin);
}

}  // namespace matrix

}  // namespace mcnla

#endif  // MCNLA_CORE_MATRIX_KIT_INDEX_RANGE_HPP_

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file    include/mcnla/core/matrix/coo/coo_tuple2.hpp
/// @brief   The 2-dimensional COO tuple.
///
/// @author  Mu Yang <<emfomy@gmail.com>>
///

#ifndef MCNLA_CORE_MATRIX_COO_COO_TUPLE2_HPP_
#define MCNLA_CORE_MATRIX_COO_COO_TUPLE2_HPP_

#include <mcnla/core/matrix/coo/coo_tuple2.hh>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The MCNLA namespace.
//
namespace mcnla {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The matrix namespace.
//
namespace matrix {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Construct with given data.
///
template <typename _Val, typename _Idx>
CooTuple2<_Val, _Idx>::CooTuple2(
    ValType& val,
    IdxType& idx0,
    IdxType& idx1
) noexcept
  : IdxsType(idx0, idx1),
    val_(val) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Construct with given data.
///
template <typename _Val, typename _Idx>
CooTuple2<_Val, _Idx>::CooTuple2(
    ValType& val,
    IdxsType& idxs
) noexcept
  : IdxsType(idxs),
    val_(val) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Copy constructor.
///
template <typename _Val, typename _Idx>
CooTuple2<_Val, _Idx>::CooTuple2( const CooTuple2 &other ) noexcept
  : IdxsType(other),
    val_(other.val_) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Copy assignment operator.
///
template <typename _Val, typename _Idx>
CooTuple2<_Val, _Idx>& CooTuple2<_Val, _Idx>::operator=(
    const CooTuple2 &other
) noexcept {
  IdxsType::operator=(other);
  val_ = (other.val_);
  return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Assignment operator.
///
template <typename _Val, typename _Idx>
CooTuple2<_Val, _Idx>& CooTuple2<_Val, _Idx>::operator=(
    const ValType val
) noexcept {
  val_ = val;
  return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Assignment operator.
///
template <typename _Val, typename _Idx>
CooTuple2<_Val, _Idx>& CooTuple2<_Val, _Idx>::operator=(
    const IdxsType idxs
) noexcept {
  IdxsType::operator=(idxs);
  return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Assign value.
///
template <typename _Val, typename _Idx>
CooTuple2<_Val, _Idx>& CooTuple2<_Val, _Idx>::operator()(
    const ValType val,
    const IdxType idx0,
    const IdxType idx1
) noexcept {
  IdxType::operator=(idx0, idx1);
  val_ = val;
  return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Assign value.
///
template <typename _Val, typename _Idx>
CooTuple2<_Val, _Idx>& CooTuple2<_Val, _Idx>::operator()(
    const ValType val,
    const IdxsType idxs
) noexcept {
  IdxType::operator=(idxs);
  val_ = val;
  return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Output to stream.
///
template <typename __Val, typename __Idx>
std::ostream& operator<<(
    std::ostream &os,
    const CooTuple2<__Val, __Idx> &tuple
) {
  return os << "( " << std::setw(kOsIdxWidth) << tuple.idx0() << ", "
                    << std::setw(kOsIdxWidth) << tuple.idx1() << " ) "
                    << std::setw(kOsValWidth) << tuple.val();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the value.
///
template <typename _Val, typename _Idx>
_Val& CooTuple2<_Val, _Idx>::val() noexcept {
  return val_;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  val
///
template <typename _Val, typename _Idx>
const _Val& CooTuple2<_Val, _Idx>::val() const noexcept {
  return val_;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the first index.
///
template <typename _Val, typename _Idx>
_Idx& CooTuple2<_Val, _Idx>::idx0() noexcept {
  return std::get<0>(*this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  idx0
///
template <typename _Val, typename _Idx>
const _Idx& CooTuple2<_Val, _Idx>::idx0() const noexcept {
  return std::get<0>(*this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the second index.
///
template <typename _Val, typename _Idx>
_Idx& CooTuple2<_Val, _Idx>::idx1() noexcept {
  return std::get<1>(*this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  idx1
///
template <typename _Val, typename _Idx>
const _Idx& CooTuple2<_Val, _Idx>::idx1() const noexcept {
  return std::get<1>(*this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the indices.
///
template <typename _Val, typename _Idx>
std::tuple<_Idx&, _Idx&>& CooTuple2<_Val, _Idx>::idxs() noexcept {
  return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  idxs
///
template <typename _Val, typename _Idx>
const std::tuple<_Idx&, _Idx&>& CooTuple2<_Val, _Idx>::idxs() const noexcept {
  return *this;
}

}  // namespace matrix

}  // namespace mcnla

#endif  // MCNLA_CORE_MATRIX_COO_COO_TUPLE2_HPP_

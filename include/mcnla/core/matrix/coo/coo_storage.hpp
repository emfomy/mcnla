////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file    include/mcnla/core/matrix/coo/coo_storage.hpp
/// @brief   The COO storage.
///
/// @author  Mu Yang <<emfomy@gmail.com>>
///

#ifndef MCNLA_CORE_MATRIX_COO_COO_STORAGE_HPP_
#define MCNLA_CORE_MATRIX_COO_COO_STORAGE_HPP_

#include <mcnla/core/matrix/coo/coo_storage.hh>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The MCNLA namespace.
//
namespace mcnla {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The matrix namespace.
//
namespace matrix {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Default constructor.
///
template <class _Scalar>
CooStorage<_Scalar>::CooStorage() noexcept
  : val_() {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Construct with given size information.
///
template <class _Scalar>
CooStorage<_Scalar>::CooStorage(
    const index_t capacity
) noexcept
  : val_(capacity) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Construct with given raw data.
///
template <class _Scalar>
CooStorage<_Scalar>::CooStorage(
    const ValArrayType &val
) noexcept
  : val_(val) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Copy constructor.
///
/// @attention  It is shallow copy. For deep copy, uses mcnla::la::copy.
///
template <class _Scalar>
CooStorage<_Scalar>::CooStorage(
    const CooStorage &other
) noexcept
  : val_(other.val_) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Move constructor.
///
template <class _Scalar>
CooStorage<_Scalar>::CooStorage(
    CooStorage &&other
) noexcept
  : val_(std::move(other.val_)) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Copy assignment operator.
///
/// @attention  It is shallow copy. For deep copy, uses mcnla::la::copy.
///
template <class _Scalar>
CooStorage<_Scalar>& CooStorage<_Scalar>::operator=(
    const CooStorage &other
) noexcept {
  val_ = other.val_;
  return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Move assignment operator.
///
template <class _Scalar>
CooStorage<_Scalar>& CooStorage<_Scalar>::operator=(
    CooStorage &&other
) noexcept {
  val_ = std::move(other.val_);
  return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the capacity of the value array.
///
template <class _Scalar>
index_t CooStorage<_Scalar>::valCapacity() const noexcept {
  return val_.capacity();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the offset of the value array.
///
template <class _Scalar>
index_t CooStorage<_Scalar>::valOffset() const noexcept {
  return val_.offset();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the value array.
///
template <class _Scalar>
Array<_Scalar>& CooStorage<_Scalar>::val() noexcept {
  return val_;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  val
///
template <class _Scalar>
const Array<_Scalar>& CooStorage<_Scalar>::val() const noexcept {
  return val_;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the raw value pointer.
///
template <class _Scalar>
_Scalar* CooStorage<_Scalar>::valPtr() noexcept {
  return *val_;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  valPtr
///
template <class _Scalar>
const _Scalar* CooStorage<_Scalar>::valPtr() const noexcept {
  return *val_;
}

}  // namespace matrix

}  // namespace mcnla

#endif  // MCNLA_CORE_MATRIX_COO_COO_STORAGE_HPP_

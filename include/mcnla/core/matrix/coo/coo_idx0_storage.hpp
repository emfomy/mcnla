////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file    include/mcnla/core/matrix/coo/coo_idx0_storage.hpp
/// @brief   The COO idx0 storage.
///
/// @author  Mu Yang <<emfomy@gmail.com>>
///

#ifndef MCNLA_CORE_MATRIX_COO_COO_IDX0_STORAGE_HPP_
#define MCNLA_CORE_MATRIX_COO_COO_IDX0_STORAGE_HPP_

#include <mcnla/core/matrix/coo/coo_idx0_storage.hh>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The MCNLA namespace.
//
namespace mcnla {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The matrix namespace.
//
namespace matrix {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the capacity of the first dimension index array.
///
template <class _Idx>
index_t CooIdx0Storage<_Idx>::idx0Capacity() const noexcept {
  return this->valCapacity();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the offset of the first dimension index array.
///
template <class _Idx>
index_t CooIdx0Storage<_Idx>::idx0Offset() const noexcept {
  return this->valOffset();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the first dimension index array.
///
template <class _Idx>
Array<_Idx>& CooIdx0Storage<_Idx>::idx0() noexcept {
  return this->val();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  idx0
///
template <class _Idx>
const Array<_Idx>& CooIdx0Storage<_Idx>::idx0() const noexcept {
  return this->val();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the raw first dimension index pointer.
///
template <class _Idx>
_Idx* CooIdx0Storage<_Idx>::idx0Ptr() noexcept {
  return this->valptr();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  idx0Ptr
///
template <class _Idx>
const _Idx* CooIdx0Storage<_Idx>::idx0Ptr() const noexcept {
  return this->valptr();
}

}  // namespace matrix

}  // namespace mcnla

#endif  // MCNLA_CORE_MATRIX_COO_COO_IDX0_STORAGE_HPP_

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file    include/mcnla/core/matrix/base/invertible_wrapper.hpp
/// @brief   The inverse wrapper.
///
/// @author  Mu Yang <<emfomy@gmail.com>>
///

#ifndef MCNLA_CORE_MATRIX_BASE_INVERTIBLE_WRAPPER_HPP_
#define MCNLA_CORE_MATRIX_BASE_INVERTIBLE_WRAPPER_HPP_

#include <mcnla/core/matrix/base/invertible_wrapper.hh>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The MCNLA namespace.
//
namespace mcnla {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The matrix namespace.
//
namespace matrix {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the inverse view of the container.
///
template <class _Derived>
InverseView<_Derived>& InvertibleWrapper<_Derived>::inv() noexcept {
  return static_cast<InverseType&>(this->derived());
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  inv
///
template <class _Derived>
const InverseView<_Derived>& InvertibleWrapper<_Derived>::inv() const noexcept {
  return static_cast<const InverseType&>(this->derived());
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  mcnla::matrix::InvertibleWrapper::inv
///
template <class _Base>
_Base& InverseView<_Base>::inv() noexcept {
  return static_cast<BaseType&>(*this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  inv
///
template <class _Base>
const _Base& InverseView<_Base>::inv() const noexcept {
  return static_cast<const BaseType&>(*this);
}

}  // namespace matrix

}  // namespace mcnla

#endif  // MCNLA_CORE_MATRIX_BASE_INVERTIBLE_WRAPPER_HPP_

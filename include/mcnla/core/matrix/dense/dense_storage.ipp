////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file    include/mcnla/core/matrix/dense/dense_storage.ipp
/// @brief   The implementation of dense storage.
///
/// @author  Mu Yang <<emfomy@gmail.com>>
///

#ifndef MCNLA_CORE_MATRIX_DENSE_DENSE_STORAGE_IPP_
#define MCNLA_CORE_MATRIX_DENSE_DENSE_STORAGE_IPP_

#include <mcnla/core/matrix/dense/dense_storage.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The MCNLA namespace.
//
namespace mcnla {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The matrix namespace.
//
namespace matrix {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Default constructor.
///
template <class _Scalar>
DenseStorage<_Scalar>::DenseStorage() noexcept
  : value_() {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Construct with given size information.
///
template <class _Scalar>
DenseStorage<_Scalar>::DenseStorage(
    const index_t capacity
) noexcept
  : value_(capacity) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Construct with given raw data.
///
template <class _Scalar>
DenseStorage<_Scalar>::DenseStorage(
    const ValueArrayType &value
) noexcept
  : value_(value) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Copy constructor.
///
/// @attention  It is shallow copy. For deep copy, uses mcnla::blas::copy.
///
template <class _Scalar>
DenseStorage<_Scalar>::DenseStorage(
    const DenseStorage &other
) noexcept
  : value_(other.value_) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Move constructor.
///
template <class _Scalar>
DenseStorage<_Scalar>::DenseStorage(
    DenseStorage &&other
) noexcept
  : value_(std::move(other.value_)) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Copy assignment operator.
///
/// @attention  It is shallow copy. For deep copy, uses mcnla::blas::copy.
///
template <class _Scalar>
DenseStorage<_Scalar>& DenseStorage<_Scalar>::operator=(
    const DenseStorage &other
) noexcept {
  value_ = other.value_;
  return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Move assignment operator.
///
template <class _Scalar>
DenseStorage<_Scalar>& DenseStorage<_Scalar>::operator=(
    DenseStorage &&other
) noexcept {
  value_ = std::move(other.value_);
  return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Determines if the memory size is zero.
///
template <class _Scalar>
bool DenseStorage<_Scalar>::isEmpty() const noexcept {
  return value_.isEmpty();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the capacity of the value array.
///
template <class _Scalar>
index_t DenseStorage<_Scalar>::capacity() const noexcept {
  return value_.capacity();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the offset of the value array.
///
template <class _Scalar>
index_t DenseStorage<_Scalar>::offset() const noexcept {
  return value_.offset();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the value array.
///
template <class _Scalar>
Array<_Scalar>& DenseStorage<_Scalar>::value() noexcept {
  return value_;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  value
///
template <class _Scalar>
const Array<_Scalar>& DenseStorage<_Scalar>::value() const noexcept {
  return value_;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the raw value pointer.
///
template <class _Scalar>
_Scalar* DenseStorage<_Scalar>::valuePtr() noexcept {
  return *value_;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  valuePtr
///
template <class _Scalar>
const _Scalar* DenseStorage<_Scalar>::valuePtr() const noexcept {
  return *value_;
}

}  // namespace matrix

}  // namespace mcnla

#endif  // MCNLA_CORE_MATRIX_DENSE_DENSE_STORAGE_IPP_

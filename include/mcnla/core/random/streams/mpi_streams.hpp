////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file    include/mcnla/core/random/streams/mpi_streams.hpp
/// @brief   The random MPI generator driver.
///
/// @author  Mu Yang <<emfomy@gmail.com>>
///

#ifndef MCNLA_CORE_RANDOM_STREAMS_MPI_STREAMS_HPP_
#define MCNLA_CORE_RANDOM_STREAMS_MPI_STREAMS_HPP_

#include <mcnla/core/random/streams/mpi_streams.hh>
#include <vector>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The MCNLA namespace
//
namespace mcnla {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The random namespace
//
namespace random {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Construct with given seed.
///
MpiStreams::MpiStreams(
    const MPI_Comm mpi_comm,
    const mpi_int_t mpi_root,
    const index_t seed
) noexcept
  : mpi_comm_(mpi_comm),
    mpi_root_(mpi_root),
    streams_(bcastSeed(seed)) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  streams
///
MpiStreams::operator Streams&() noexcept {
  return streams_;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  streams
///
MpiStreams::operator const Streams&() const noexcept {
  return streams_;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the random streams.
///
Streams& MpiStreams::streams() noexcept {
  return streams_;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  streams
///
const Streams& MpiStreams::streams() const noexcept {
  return streams_;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  Streams::operator[]
///
Streams::StreamType MpiStreams::operator[](
    const index_t i
) const noexcept {
  return streams_[i];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  Streams::setSeed
///
void MpiStreams::setSeed(
    const index_t seed
) noexcept {
  streams_.setSeed(bcastSeed(seed));
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Boardcast the random seed.
///
index_t MpiStreams::bcastSeed(
    const index_t seed
) const noexcept {
  std::vector<index_t> seeds(mpi::commSize(mpi_comm_));
  if ( mpi::isCommRoot(mpi_root_, mpi_comm_) ) {
    std::seed_seq seq{seed};
    seq.generate(seeds.begin(), seeds.end());
  }
  constexpr const MPI_Datatype &datatype = traits::MpiValTraits<index_t>::datatype;
  index_t seed_tmp;
  MPI_Scatter(seeds.data(), 1, datatype, &seed_tmp, 1, datatype, mpi_root_, mpi_comm_);
  return seed_tmp;
}

}  // namespace random

}  // namespace mcnla

#endif  // MCNLA_CORE_RANDOM_STREAMS_MPI_STREAMS_HPP_

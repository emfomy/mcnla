////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file    include/mcnla/core/la/def.hpp
/// @brief   The linear algebra definitions.
///
/// @author  Mu Yang <<emfomy@gmail.com>>
///

#ifndef MCNLA_CORE_LA_DEF_HPP_
#define MCNLA_CORE_LA_DEF_HPP_

#include <mcnla/def.hpp>
#include <mcnla/core/def.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @defgroup  la_module  Linear Algebra Module
/// @ingroup   core_module
/// @brief     The Linear Algebra Module
///

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @defgroup  la_wrapper_module  Linear Algebra Wrapper Module
/// @ingroup   la_module
/// @brief     The Linear Algebra Wrapper Module
///

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The MCNLA namespace
//
namespace mcnla {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ingroup  la_module
/// The linear algebra namespace.
///
namespace la {

using namespace matrix;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// The linear algebra detail namespace.
///
namespace detail {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Convert transpose option to char.
///
template<typename _Scalar>
static constexpr char toTransChar( const Trans trans ) {
  return !isTrans(trans) ? ((isConj(trans) && traits::ScalarTraits<_Scalar>::is_complex) ? 'R' : 'N')
                         : ((isConj(trans) && traits::ScalarTraits<_Scalar>::is_complex) ? 'C' : 'T');
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Convert upper/lower option to char.
///
static constexpr char toUploChar( Uplo uplo, Trans trans = Trans::NORMAL ) {
  return (isLower(uplo) ^ isTrans(trans)) ? 'L' : 'U';
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Convert diagonal option to char.
///
static constexpr char toDiagChar( Uplo uplo ) {
  return !isUnitDiag(uplo) ? 'N' : 'U';
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  The job option.
///
using JobOption = char;

}  // namespace la

}  // namespace mcnla

#endif  // MCNLA_CORE_LA_DEF_HPP_

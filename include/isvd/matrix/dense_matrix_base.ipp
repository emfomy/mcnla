////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file    include/isvd/matrix/dense_matrix_base.ipp
/// @brief   The implementation of dense matrix base.
///
/// @author  Mu Yang <emfomy@gmail.com>
///

#ifndef ISVD_MATRIX_DENSE_MATRIX_BASE_IPP_
#define ISVD_MATRIX_DENSE_MATRIX_BASE_IPP_

#include <isvd/matrix/dense_matrix.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The iSVD namespace.
//
namespace isvd {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The implementation namespace.
//
namespace impl {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Construct with given size information.
///
template <class _Data>
DenseMatrixBase<_Data>::DenseMatrixBase() noexcept
  : MatrixBase<_Data>(new _Data()) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Construct with given size information.
///
template <class _Data>
DenseMatrixBase<_Data>::DenseMatrixBase(
    const index_t nrow,
    const index_t ncol
) noexcept
  : MatrixBase<_Data>(new _Data(nrow, ncol)) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Construct with given size information.
///
template <class _Data>
DenseMatrixBase<_Data>::DenseMatrixBase(
    const index_t nrow,
    const index_t ncol,
    const index_t pitch
) noexcept
  : MatrixBase<_Data>(new _Data(nrow, ncol, pitch)) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Construct with given raw data.
///
/// @attention  DO NOT FREE @a value!!
///
template <class _Data>
DenseMatrixBase<_Data>::DenseMatrixBase(
    const index_t nrow,
    const index_t ncol,
    const index_t pitch,
    ScalarType *value
) noexcept
  : MatrixBase<_Data>(new _Data(nrow, ncol, pitch, value)) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Gets the storage layout.
///
template <class _Data>
Layout DenseMatrixBase<_Data>::getLayout() const noexcept { return this->data_->getLayout(); }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Gets the number of rows.
///
template <class _Data>
index_t DenseMatrixBase<_Data>::getNrow() const noexcept { return this->data_->getNrow(); }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Gets the number of columns.
///
template <class _Data>
index_t DenseMatrixBase<_Data>::getNcol() const noexcept { return this->data_->getNcol(); }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Gets the leading dimension.
///
template <class _Data>
index_t DenseMatrixBase<_Data>::getPitch() const noexcept { return this->data_->getPitch(); }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Gets the number of columns.
///
template <class _Data>
typename DenseMatrixBase<_Data>::ScalarType*
    DenseMatrixBase<_Data>::getValue() noexcept { return this->data_->getValue(); }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Gets the number of columns.
///
template <class _Data>
const typename DenseMatrixBase<_Data>::ScalarType*
    DenseMatrixBase<_Data>::getValue() const noexcept { return this->data_->getValue(); }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Gets the number of columns.
///
template <class _Data>
typename DenseMatrixBase<_Data>::ScalarType&
    DenseMatrixBase<_Data>::getValue(
    const index_t rowid,
    const index_t colid
) noexcept {
  return this->data_->getValue(rowid, colid);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Gets the number of columns.
///
template <class _Data>
const typename DenseMatrixBase<_Data>::ScalarType&
    DenseMatrixBase<_Data>::getValue(
    const index_t rowid,
    const index_t colid
) const noexcept {
  return this->data_->getValue(rowid, colid);
}

}  // namespace impl

}  // namespace isvd

#endif  // ISVD_MATRIX_DENSE_MATRIX_BASE_IPP_

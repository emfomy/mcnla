////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file    include/isvd/matrix/dense_block_data.ipp
/// @brief   The implementation of dense matrix data storage.
///
/// @author  Mu Yang <emfomy@gmail.com>
///

#ifndef ISVD_MATRIX_DENSE_BLOCK_DATA_IPP_
#define ISVD_MATRIX_DENSE_BLOCK_DATA_IPP_

#include <isvd/matrix/dense_block.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The iSVD namespace.
//
namespace isvd {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The implementation namespace.
//
namespace impl {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Default constructor.
///
template <typename _Scalar, Layout _layout>
DenseBlockData<_Scalar, _layout>::DenseBlockData() noexcept
  : DenseMatrixData<_Scalar, _layout>() {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Construct with given raw data.
///
/// @attention  DO NOT FREE @a value!!
///
template <typename _Scalar, Layout _layout>
DenseBlockData<_Scalar, _layout>::DenseBlockData(
    const index_t nrow,
    const index_t ncol,
    const index_t pitch,
    _Scalar *value
) noexcept
  : DenseMatrixData<_Scalar, _layout>(nrow, ncol, pitch, value) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Default destructor.
///
template <typename _Scalar, Layout _layout>
DenseBlockData<_Scalar, _layout>::~DenseBlockData() noexcept {}

}  // namespace impl

}  // namespace isvd

#endif  // ISVD_MATRIX_DENSE_BLOCK_DATA_IPP_

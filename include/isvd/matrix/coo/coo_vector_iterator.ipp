////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file    include/isvd/matrix/coo/coo_vector_iterator.ipp
/// @brief   The implementation of COO vector iterator.
///
/// @author  Mu Yang <emfomy@gmail.com>
///

#ifndef ISVD_MATRIX_COO_COO_VECTOR_ITERATOR_IPP_
#define ISVD_MATRIX_COO_COO_VECTOR_ITERATOR_IPP_

#include <isvd/matrix/coo/coo_vector_iterator.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The iSVD namespace.
//
namespace isvd {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The internal namespace.
//
namespace internal {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Default constructor.
///
template <typename _Scalar>
CooVectorIterator<_Scalar>::CooVectorIterator() noexcept
  : pos_(0),
    vector_(nullptr) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Construct with given vector.
///
template <typename _Scalar>
CooVectorIterator<_Scalar>::CooVectorIterator(
    CooVector<_Scalar> *vector
) noexcept
  : pos_(0),
    vector_(vector) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Copy constructor.
///
template <typename _Scalar>
CooVectorIterator<_Scalar>::CooVectorIterator(
    const CooVectorIterator &other
) noexcept
  : pos_(other.pos_),
    vector_(other.vector_) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Copy assignment operator.
///
template <typename _Scalar>
CooVectorIterator<_Scalar>& CooVectorIterator<_Scalar>::operator=(
    const CooVectorIterator &other
) noexcept {
  pos_ = other.pos_;
  vector_ = other.vector_;
  return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Equal-to operator.
///
template <typename _Scalar>
bool CooVectorIterator<_Scalar>::operator==(
    const CooVectorIterator &other
) const noexcept {
  if ( this == &other ) {
    return true;
  } else {
    return &(getValue()) == &(other.getValue());
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Not-equal-to operator.
///
template <typename _Scalar>
bool CooVectorIterator<_Scalar>::operator!=(
    const CooVectorIterator &other
) const noexcept {
  return !(*this == other);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Prefix increment operator.
///
template <typename _Scalar>
CooVectorIterator<_Scalar>& CooVectorIterator<_Scalar>::operator++() noexcept {
  assert(vector_ != nullptr);

  const auto nnz = vector_->getNnz();
  if ( ++pos_ >= nnz ) {
    pos_ = nnz;
  }
  return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Postfix increment operator.
///
template <typename _Scalar>
CooVectorIterator<_Scalar>& CooVectorIterator<_Scalar>::operator++( int ) noexcept {
  auto retval(*this);
  (*this)++;
  return retval;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  getValue
///
template <typename _Scalar>
_Scalar& CooVectorIterator<_Scalar>::operator*() noexcept {
  return getValue();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  getValue
///
template <typename _Scalar>
const _Scalar& CooVectorIterator<_Scalar>::operator*() const noexcept {
  return getValue();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  getValue
///
template <typename _Scalar>
_Scalar* CooVectorIterator<_Scalar>::operator->() noexcept {
  return &getValue();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  getValue
///
template <typename _Scalar>
const _Scalar* CooVectorIterator<_Scalar>::operator->() const noexcept {
  return &getValue();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the value.
///
/// @attention  Never call this when the iterator is at the end.
///
template <typename _Scalar>
_Scalar& CooVectorIterator<_Scalar>::getValue() noexcept {
  return vector_->getValue()[pos_];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  getValue
///
template <typename _Scalar>
const _Scalar& CooVectorIterator<_Scalar>::getValue() const noexcept {
  return vector_->getValue()[pos_];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the index.
///
template <typename _Scalar>
index_t CooVectorIterator<_Scalar>::getIdx() const noexcept {
  return vector_->getIdx()[pos_];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the internal position.
///
template <typename _Scalar>
index_t CooVectorIterator<_Scalar>::getPos() const noexcept {
  return pos_;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Sets the iterator to beginning.
///
template <typename _Scalar>
CooVectorIterator<_Scalar>& CooVectorIterator<_Scalar>::setBegin() noexcept {
  pos_ = 0;
  return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Sets the iterator to end.
///
template <typename _Scalar>
CooVectorIterator<_Scalar>& CooVectorIterator<_Scalar>::setEnd() noexcept {
  pos_ = (vector_ != nullptr) ? vector_->getNnz() : 0;
  return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the to beginning iterator.
///
template <typename _Scalar>
CooVectorIterator<_Scalar> CooVectorIterator<_Scalar>::begin( CooVector<_Scalar> *vector ) noexcept {
  return CooVectorIterator(vector).setBegin();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  begin
///
template <typename _Scalar>
const CooVectorIterator<_Scalar> CooVectorIterator<_Scalar>::begin( const CooVector<_Scalar> *vector ) noexcept {
  return CooVectorIterator(const_cast<CooVector<_Scalar>*>(vector)).setBegin();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the to end iterator.
///
template <typename _Scalar>
CooVectorIterator<_Scalar> CooVectorIterator<_Scalar>::end( CooVector<_Scalar> *vector ) noexcept {
  return CooVectorIterator(vector).setEnd();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  end
///
template <typename _Scalar>
const CooVectorIterator<_Scalar> CooVectorIterator<_Scalar>::end( const CooVector<_Scalar> *vector ) noexcept {
  return CooVectorIterator(const_cast<CooVector<_Scalar>*>(vector)).setEnd();
}

}  // namespace internal

}  // namespace isvd

#endif  // ISVD_MATRIX_COO_COO_VECTOR_ITERATOR_IPP_

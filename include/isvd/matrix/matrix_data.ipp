////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file    include/isvd/matrix/matrix_data.ipp
/// @brief   The implementation of matrix data storage interface.
///
/// @author  Mu Yang <emfomy@gmail.com>
///

#ifndef ISVD_MATRIX_MATRIX_DATA_IPP_
#define ISVD_MATRIX_MATRIX_DATA_IPP_

#include <isvd/matrix/matrix.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The iSVD namespace.
//
namespace isvd {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The implementation namespace.
//
namespace impl {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Default constructor.
///
template <typename _Type>
MatrixData<_Type>::MatrixData() noexcept {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Default destructor.
///
template <typename _Type>
MatrixData<_Type>::~MatrixData() noexcept {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Gets the number of rows.
///
template <typename _Type>
index_t MatrixData<_Type>::getNrow() const noexcept { return 0; }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Gets the number of columns.
///
template <typename _Type>
index_t MatrixData<_Type>::getNcol() const noexcept { return 0; }

}  // namespace impl

}  // namespace isvd

#endif  // ISVD_MATRIX_MATRIX_DATA_IPP_

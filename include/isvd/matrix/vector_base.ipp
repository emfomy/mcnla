////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file    include/isvd/matrix/vector_base.ipp
/// @brief   The implementation of vector interface.
///
/// @author  Mu Yang <emfomy@gmail.com>
///

#ifndef ISVD_MATRIX_VECTOR_BASE_IPP_
#define ISVD_MATRIX_VECTOR_BASE_IPP_

#include <isvd/matrix/vector_base.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The iSVD namespace.
//
namespace isvd {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The internal namespace.
//
namespace internal {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the length.
///
template <class _Derived>
index_t VectorBase<_Derived>::getLength() const noexcept { return this->derived().getLengthImpl(); }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the size.
///
template <class _Derived>
index_t VectorBase<_Derived>::getSize() const noexcept { return getLength(); }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Resize the vector
///
template <class _Derived>
void VectorBase<_Derived>::resize( const index_t length ) noexcept { return this->derived().resizeImpl(length); }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Converts the index range.
///
template <class _Derived>
IndexRange VectorBase<_Derived>::convertRange( const IndexRange range ) const noexcept { return range.convert(getLength()); }

}  // namespace internal

}  // namespace isvd

#endif  // ISVD_MATRIX_VECTOR_BASE_IPP_

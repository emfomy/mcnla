////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file    include/isvd/matrix/dense_base.ipp
/// @brief   The implementation of dense interface.
///
/// @author  Mu Yang <emfomy@gmail.com>
///

#ifndef ISVD_MATRIX_DENSE_BASE_IPP_
#define ISVD_MATRIX_DENSE_BASE_IPP_

#include <isvd/matrix/dense_base.hpp>
#include <isvd/utility/memory.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The iSVD namespace.
//
namespace isvd {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The internal namespace.
//
namespace internal {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Default constructor.
///
template <class _Derived>
DenseBase<_Derived>::DenseBase() noexcept
  : offset_(0),
    data_() {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Construct with given size information.
///
template <class _Derived>
DenseBase<_Derived>::DenseBase(
    const index_t capability,
    const index_t offset
) noexcept
  : offset_(offset),
    data_(capability) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Construct with given raw data.
///
template <class _Derived>
DenseBase<_Derived>::DenseBase(
    const index_t capability,
    ScalarType *value,
    const index_t offset
) noexcept
  : offset_(offset),
    data_(capability, value) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Construct with given raw data.
///
template <class _Derived>
DenseBase<_Derived>::DenseBase(
    const index_t capability,
    std::shared_ptr<ScalarType> value,
    const index_t offset
) noexcept
  : offset_(offset),
    data_(capability, value) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Construct from data storage.
///
template <class _Derived>
DenseBase<_Derived>::DenseBase(
    const DenseData<ScalarType>& data,
    const index_t offset
) noexcept
  : offset_(offset),
    data_(data) {
  assert(offset_ >= 0 && offset_ <= data_.getCapability());
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the length of data array.
///
template <class _Derived>
index_t DenseBase<_Derived>::getCapability() const noexcept { return getData().getCapability(); }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the offset of starting position.
///
template <class _Derived>
index_t DenseBase<_Derived>::getOffset() const noexcept { return offset_; }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the data storage.
///
template <class _Derived>
DenseData<typename DenseBase<_Derived>::ScalarType>& DenseBase<_Derived>::getData() noexcept { return data_; }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  getData
///
template <class _Derived>
const DenseData<typename DenseBase<_Derived>::ScalarType>& DenseBase<_Derived>::getData() const noexcept { return data_; }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the data array.
///
template <class _Derived>
typename DenseBase<_Derived>::ScalarType* DenseBase<_Derived>::getValue() noexcept {
  return getData().getValue() + getOffset();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @copydoc  getValue
///
template <class _Derived>
const typename DenseBase<_Derived>::ScalarType* DenseBase<_Derived>::getValue() const noexcept {
  return getData().getValue() + getOffset();
}

}  // namespace internal

}  // namespace isvd

#endif  // ISVD_MATRIX_DENSE_BASE_IPP_

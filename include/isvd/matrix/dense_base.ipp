////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file    include/isvd/matrix/dense_base.ipp
/// @brief   The implementation of dense interface.
///
/// @author  Mu Yang <emfomy@gmail.com>
///

#ifndef ISVD_MATRIX_DENSE_BASE_IPP_
#define ISVD_MATRIX_DENSE_BASE_IPP_

#include <isvd/matrix/dense_base.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The iSVD namespace.
//
namespace isvd {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The implementation namespace.
//
namespace impl {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the length of data array.
///
template <class _Derived>
index_t DenseBase<_Derived>::getCapability() const noexcept { return this->derived().getCapabilityImpl(); }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the data array.
///
template <class _Derived>
typename DenseBase<_Derived>::ScalarType* DenseBase<_Derived>::getValue() noexcept {
  return this->derived().getValueImpl();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the data array.
///
template <class _Derived>
const typename DenseBase<_Derived>::ScalarType* DenseBase<_Derived>::getValue() const noexcept {
  return this->derived().getValueImpl();
}

}  // namespace impl

}  // namespace isvd

#endif  // ISVD_MATRIX_DENSE_BASE_IPP_

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file    include/isvd/matrix/matrix.ipp
/// @brief   The implementation of matrix interface.
///
/// @author  Mu Yang <emfomy@gmail.com>
///

#ifndef ISVD_MATRIX_MATRIX_BASE_IPP_
#define ISVD_MATRIX_MATRIX_BASE_IPP_

#include <isvd/matrix/matrix.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The iSVD namespace.
//
namespace isvd {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The implementation namespace.
//
namespace impl {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Default constructor.
///
template <class _Data> template<typename... Args>
Matrix<_Data>::Matrix(
    Args... args
) noexcept
  : data_(new _Data(args...)) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Copy constructor.
///
template <class _Data>
Matrix<_Data>::Matrix(
    const Matrix &other
) noexcept
  : data_(other.data_) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Construct with given data.
///
template <class _Data>
Matrix<_Data>::Matrix( _Data *data ) noexcept
  : data_(data) {}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Default destructor.
///
template <class _Data>
Matrix<_Data>::~Matrix() noexcept {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Copy assignment operator.
///
template <class _Data>
Matrix<_Data>& Matrix<_Data>::operator=( const Matrix &other ) noexcept { data_ = other.data_; return *this; }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Member assess operator.
/// Gets the data storage.
///
template <class _Data>
_Data* Matrix<_Data>::operator*() const noexcept { return data_.get(); }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Member assess operator.
/// Assesses member of #data_.
///
template <class _Data>
_Data* Matrix<_Data>::operator->() const noexcept { return data_.get(); }

}  // namespace impl

}  // namespace isvd

#endif  // ISVD_MATRIX_MATRIX_BASE_IPP_

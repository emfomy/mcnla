////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file    include/isvd/core/sketcher_base.ipp
/// @brief   The implementation of iSVD sketcher interface.
///
/// @author  Mu Yang <emfomy@gmail.com>
///

#ifndef ISVD_CORE_SKETCHER_BASE_IPP_
#define ISVD_CORE_SKETCHER_BASE_IPP_

#include <isvd/core/sketcher_base.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The iSVD namespace.
//
namespace isvd {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The internal namespace.
//
namespace internal {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Construct with given parameters.
///
template <class _Derived>
SketcherBase<_Derived>::SketcherBase(
    const internal::Parameters<RealScalarType> &parameters
) noexcept : parameters_(parameters) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Initializes.
///
template <class _Derived>
void SketcherBase<_Derived>::initialize() noexcept { this->derived().initializeImpl(); }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Random sketches.
///
template <class _Derived>
void SketcherBase<_Derived>::sketch( const MatrixType &matrix_a, DenseCubeType &cube_q ) noexcept {
  this->derived().sketchImpl(matrix_a, cube_q);
}

}  // namespace internal

}  // namespace isvd

#endif  // ISVD_CORE_SKETCHER_BASE_IPP_

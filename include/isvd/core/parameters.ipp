////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file    include/isvd/core/parameters.ipp
/// @brief   The implementation of the parameter structure of iSVD solver.
///
/// @author  Mu Yang <emfomy@gmail.com>
///

#ifndef ISVD_CORE_PARAMETERS_IPP_
#define ISVD_CORE_PARAMETERS_IPP_

#include <isvd/core/parameters.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The iSVD namespace.
//
namespace isvd {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The internal namespace.
//
namespace internal {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Default constructor
///
template <typename _RealScalar>
Parameters<_RealScalar>::Parameters( const MPI_Comm comm ) noexcept
  : mpi_comm(comm),
    mpi_size(mpi::getCommSize(comm)),
    mpi_rank(mpi::getCommRank(comm)) {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Check if the solver is initialized.
///
template <typename _RealScalar>
bool Parameters<_RealScalar>::isInitialized() const noexcept { return initialized_; }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the number of rows of the matrix.
///
template <typename _RealScalar>
index_t Parameters<_RealScalar>::getNrow() const noexcept { return nrow_; }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the number of column of the matrix.
///
template <typename _RealScalar>
index_t Parameters<_RealScalar>::getNcol() const noexcept { return ncol_; }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the desired rank of approximate SVD.
///
template <typename _RealScalar>
index_t Parameters<_RealScalar>::getRank() const noexcept { return rank_; }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the oversampling dimension.
///
template <typename _RealScalar>
index_t Parameters<_RealScalar>::getOverRank() const noexcept { return over_rank_; }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the dimension of random sketches.
///
template <typename _RealScalar>
index_t Parameters<_RealScalar>::getDimSketch() const noexcept { return rank_ + over_rank_; }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the number of random sketches per MPI node.
///
template <typename _RealScalar>
index_t Parameters<_RealScalar>::getNumSketch() const noexcept { return num_sketch_; }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the number of random sketches of all MPI nodes.
///
template <typename _RealScalar>
index_t Parameters<_RealScalar>::getNumSketchAll() const noexcept { return num_sketch_ * mpi_size; }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the maximum iteration
///
template <typename _RealScalar>
index_t Parameters<_RealScalar>::getMaxIteration() const noexcept { return max_iteration_; }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the tolerance of converge condition.
///
template <typename _RealScalar>
_RealScalar Parameters<_RealScalar>::getTolerance() const noexcept { return tolerance_; }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Gets the random seed.
///
template <typename _RealScalar>
index_t* Parameters<_RealScalar>::getSeed() const noexcept { return seed_; }

}  // namespace internal

}  // namespace isvd

#endif  // ISVD_CORE_PARAMETERS_IPP_

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file    include/isvd/blas/blas.hpp
/// @brief   The BLAS definitions
///
/// @author  Mu Yang <emfomy@gmail.com>
///

#ifndef ISVD_BLAS_BLAS_HPP_
#define ISVD_BLAS_BLAS_HPP_

#include <isvd/isvd.hpp>
#include <isvd/blas/blasf.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The iSVD namespace
//
namespace isvd {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The BLAS namespace
//
namespace blas {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Convert transpose option to char.
///
template <TransOption _trans, bool isreal = true>
struct TransChar {
  static const char value = !isTranspose(_trans) ? 'N' : isreal ? 'T' : !isConjugate(_trans) ? 'T' : 'C';
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Convert upper/lower option to char.
///
template <UploOption _uplo>
struct UploChar {
  static const char value = isLower(_uplo) ? 'L' : 'U';
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Convert diagonal option to char.
///
template <UploOption _uplo>
struct DiagChar {
  static const char value = !isUnitDiag(_uplo) ? 'N' : 'U';
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Convert side option to char.
///
template <SideOption _side>
struct SideChar {
  static const char value = isLeftSide(_side) ? 'L' : 'R';
};

}  // namespace blas

}  // namespace isvd

#endif  // ISVD_BLAS_BLAS_HPP_

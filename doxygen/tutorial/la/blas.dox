namespace mcnla {

/**
  @page tutorial_la_blas Linear Algebra Routines

  <h3>BLAS/LAPACK</h3>

  MCNLA provides some @ref la_module "BLAS/LAPACK routines" in Fortran 90 format. The following are some examples, where `x` and `y` are vectors, and `a`, `b`, `c` are matrices.

  Command                                                          | Detail
  ---------------------------------------------------------------- | ------------------------
  `%la::copy(x, y)`                                                | @f$y \gets x@f$
  `%la::axpy(x, y, 2)`                                             | @f$y \gets 2x + y@f$
  `%la::asum(x)`                                                   | @f$\sum_i x(i)@f$
  `%la::gemm(a, b, c)`                                             | @f$C \gets A \cdot B@f$
  `%la::gemm(a.t(), b, c.t())`                                     | @f$C^\top \gets A^\top \cdot B@f$
  `%la::gemm(a, b, c, 2)`                                          | @f$C \gets 2 A \cdot B@f$
  `%la::gemm(a, b, c, 2, -3)`                                      | @f$C \gets 2 A \cdot B - 3 C@f$
  `%la::symm(a, b.sym<Uplo::UPPER>(), c.t())`                      | @f$C^\top \gets A \cdot B@f$
  `%la::symm(a.sym(), b, c)`                                       | @f$C \gets A \cdot B@f$
  `%la::dimm(x.diag(), b, c)`                                      | @f$C \gets \mathrm{diag}(x) \cdot B@f$
  `%la::dimm(""_, x.diag(), c)`                                    | @f$C \gets C \cdot \mathrm{diag}(x)@f$
  `%la::dism(x.diag().inv(), b)`                                   | @f$B \gets \mathrm{diag}(x)^{-1} \cdot B@f$

  There are some smart routines that determines the types automatically (see @ref la_interface_module for detail):

  Command                                                          | Detail
  ---------------------------------------------------------------- | ------------------------
  `la::mv&zwnj;(a, x, y, alpha, beta)`                             | @f$y \gets \alpha A x + \beta y@f$
  `la::sv&zwnj;(a.inv(), x)`                                       | @f$x \gets A^{-1} x@f$
  `la::sv&zwnj;(x, a.inv())`                                       | @f$x^\top \gets x^\top A^{-1}@f$
  `la::r&zwnj;(a, x)`                                              | @f$A \gets x x^* + A@f$
  `la::r&zwnj;(a, x, y)`                                           | @f$A \gets x y^* + A@f$
  `la::ru&zwnj;(a, x, y)`                                          | @f$A \gets x y^\top + A@f$
  `la::r2&zwnj;(a, x, y)`                                          | @f$A \gets x y^* + y x^* + A@f$
  `la::mm&zwnj;(a, b, c, alpha, beta)`                             | @f$C \gets \alpha A B + \beta C@f$
  `la::sm&zwnj;(a.inv(), b, alpha)`                                | @f$B \gets \alpha A^{-1} B@f$
  `la::sm&zwnj;(b, a.inv(), alpha)`                                | @f$B \gets \alpha B A^{-1}@f$
  `la::rk&zwnj;(a, c, alpha, beta)`                                | @f$C \gets \alpha A A^* + \beta C@f$
  `la::r2k&zwnj;(a, b, c, alpha, beta)`                            | @f$C \gets \alpha A B^* + \overline{\alpha} B A^* + \beta C@f$

  @see  @ref la_module

*/

}  // namespace mcnla

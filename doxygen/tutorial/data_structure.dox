namespace mcnla {

namespace matrix {

/**
  @page tutorial_data_structure Data Structures

  <h3>%Array</h3>

  All the data structures used in MCNLA uses @ref Array to store data. The @ref Array stores a `std::shared_ptr` of `std::valarray` of the scalars. The variable @ref Array::offset "offset" marks the offset of the @ref Array.

  Let `a` be an @ref Array of @ref Array::size "size" `n` with @ref Array::offset "offset" `k`, then `a` contains a `std::valarray` with length `n`, and the first data of `a` is stored at the `o`-th position; that is, the `std::valarray` stores
  @code
    a[-k], a[-k+1], ..., a[-1], a[0], a[1], ..., a[n-k-1]
  @endcode

  An extra variable @ref Array::capacity "capacity" returns `(n-k)`, the maximum size that the data can be; that is, @ref Array::capacity "capacity" + @ref Array::offset "offset" = @ref Array::size "size".

  @ref Array provides several operations:
  - @ref Array::operator[] "a[i]": gets the `i`-th element of the data; that is, the `(i+k)`-th element in the `std::valarray`.
  - @ref Array::operator* "*a": gets the raw pointer; that is, the address of `a[0]`.
  - @ref Array::operator[] "b = a": copies `a` to `b`.
  - @ref Array::operator>> "b = a >> i": right shift the array; that is, `b[x+i] = a[x]`.
  - @ref Array::operator<< "b = a << i": left shift the array;  that is, `b[x-i] = a[x]`.
  - @ref Array::operator>> "a >>= i": same as `a = a >> i`.
  - @ref Array::operator<< "a <<= i": same as `a = a << i`.
  - @ref Array::operator<< "a.isEmpty()": returns `true` if the @ref Array::size "size" is zero.

  <h3>Dense Containers</h3>

  There are two primary @ref DenseStorage "dense data structures" in MCNLA --- @ref DenseVector and @ref DenseMatrix. Both of them uses an @ref Array --- @ref DenseStorage::val "val" --- to store the values.

  <h4>%DenseVector</h4>

  The variable @ref DenseVector::len "length" gives the number of elements in the vector. An special variable @ref DenseVector::stride "stride" gives the number of positions between successive elements in raw data.

  Let `x` be a @ref DenseVector of @ref DenseVector::len "length" `n` and @ref DenseVector::stride "stride" `s`, then the elements are
  @code
    x_val[0], x_val[s], x_val[2*s], ..., x_val[(n-1)*s]
  @endcode

  where `x_val = x.val()` is the raw array of `x`. That is, `x(i) = x_val[i*s]`.

  Note that @ref DenseVector::stride "stride" is the variable `inc?` (e.g. `incx` for vector `x`) in BLAS.

  <h4>%DenseMatrix</h4>

  The variable @ref DenseMatrix::nrow "nrow" gives the number of rows in the matrix, and the variable @ref DenseMatrix::ncol "ncol" gives the number of columns in the matrix. An special variable @ref DenseMatrix::pitch "pitch" gives the number of positions between successive elements in raw data.

  Let `a` be a @ref DenseMatrix with @ref DenseMatrix::pitch "pitch" `p`, then the element `a(i, j)` stores at

  Layout       | Position
  ------------ | ----------------
  Column-major | `a_val[i + j*p]`
  Row-major    | `a_val[i*p + j]`

  where `a_val = a.val()` is the raw array of `a`.

  Extra variables @ref DenseMatrix::dim0 "dim0" and @ref DenseMatrix::dim1 "dim1" are the aliases of the sizes in storage order: (@ref DenseMatrix::dim0 "dim0", @ref DenseMatrix::dim1 "dim1") = (@ref DenseMatrix::nrow "nrow", @ref DenseMatrix::ncol "ncol") for column-major layout, and (@ref DenseMatrix::dim0 "dim0", @ref DenseMatrix::dim1 "dim1") = (@ref DenseMatrix::ncol "ncol", @ref DenseMatrix::nrow "nrow") for row-major layout.

  Note that @ref DenseMatrix::pitch "pitch" is the variable `ld?` (e.g. `lda` for matrix `a`) in BLAS.

  <h3>Coordinate List (COO)  Containers</h3>

  There are two primary @ref CooStorage "COO data structures" in MCNLA --- @ref CooVector and @ref CooMatrix. Both of them uses an @ref Array --- @ref CooStorage::val "val" --- to store the values and several @ref Array "Array"s to stores the indices. An addition variable @ref DenseVector::nnz "nnz" stores the number of nonzero elements; that is, the length of value array and index arrays.

  <h4>%CooVector</h4>

  In @ref CooVector, @ref CooVector::idx "idx" is used for the index arrays; that is, for vector `x`,
  @code
    x(x_idx[i]) = x_val[i]
  @endcode
  where `x_val = x.val()` is the raw value array, and `x_idx = x.idx()` is the raw index array.

  <h4>%CooMatrix</h4>

  In @ref CooMatrix, @ref CooMatrix::rowidx "rowidx" and @ref CooMatrix::colidx "colidx" are used for the index arrays; that is, for matrix `a`,
  @code
    a(a_ridx[i], a_cidx[i]) = a_val[i]
  @endcode
  where `a_val = a.val()` is the raw value array, and `a_ridx = a.rowidx()` and `a_cidx = a.colidx()` are the raw index arrays.

  Extra variables @ref CooMatrix::idx0 "idx0" and @ref CooMatrix::idx1 "idx1" are the aliases of the index arrays in storage order: (@ref CooMatrix::idx0 "idx0", @ref CooMatrix::idx1 "idx1") = (@ref CooMatrix::rowidx "rowidx", @ref CooMatrix::colidx "colidx") for column-major layout, and (@ref CooMatrix::idx0 "idx0", @ref CooMatrix::idx1 "idx1") = (@ref CooMatrix::colidx "colidx", @ref CooMatrix::rowidx "rowidx") for row-major layout.

  @see  @ref matrix_module

*/

}  // namespace matrix

}  // namespace mcnla
